{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"builders/integrations/gaming/","title":"Gaming Protocols","text":""},{"location":"builders/integrations/gaming/#introduction","title":"Introduction","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"builders/integrations/gaming/#protocols","title":"Protocols","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry:</p> <ul> <li>Lorem Ipsum - Link 1 - Lorem ipsum dolor sit amet, consectetur adipiscing elit.</li> <li>Lorem Ipsum - Link 2 - Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</li> <li>Lorem Ipsum - Link 3 - Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.</li> <li>Lorem Ipsum - Link 4 - Duis aute irure dolor in reprehenderit in voluptate velit esse cillum.</li> <li>Lorem Ipsum - Link 5 - Sunt in culpa qui officia deserunt mollit anim id est laborum.</li> <li>Lorem Ipsum - Link 6 - Sunt in culpa qui officia deserunt mollit anim id est laborum.</li> </ul>"},{"location":"builders/integrations/gaming/#lorem-ipsum","title":"Lorem Ipsum","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p> <pre><code>touch lorem-ipsum.js\n</code></pre> <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p> npmyarn <pre><code>npm i lorem-ipsum\n</code></pre> <pre><code>npm i lorem-ipsum\n</code></pre> <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p> <pre><code>// Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n// In hac habitasse platea dictumst. Vestibulum ac ex nec nunc lacinia facilisis.\nconst name = \"Lorem Ipsum\";\nlet age = 30;\n\nfunction greet(person) {\n  // Phasellus elementum tellus a libero congue, non accumsan risus iaculis.\n  console.log(`Hello, ${person}!`);\n\n  if (age &gt;= 18) {\n    // Proin facilisis sapien ut libero consequat, eget pharetra urna sollicitudin.\n    console.log(\"You are an adult.\");\n  } else {\n    // Sed interdum nisl quis magna fringilla, sit amet posuere elit cursus.\n    console.log(\"You are under 18 years old.\");\n  }\n}\n\n// Aenean bibendum magna nec dolor ullamcorper, non condimentum felis fermentum.\ngreet(name);\n</code></pre> <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p> <pre><code>node lorem-ipsum.js\n</code></pre>"},{"location":"builders/reference/api-docs/","title":"API Reference","text":"<p>Welcome to the API Documentation Template page! Here, you'll find the basic structure and guidelines for documenting APIs. This template provides a standardized format for documenting API endpoints, methods, parameters, and responses. Whether you're documenting a RESTful API, GraphQL API, or any other type of API, this template will help you create clear and comprehensive documentation that is easy for developers to understand and use.</p> <p>As API documentation is typically separate from standard documentation, you can use an integrated table of contents to combine the section and page navigation with the table of contents for each page all under the left navigation menu. For example, the Authentication, User Information, and Update Profile sections on this page would appear on the left navigation menu under API Reference.</p>"},{"location":"builders/reference/api-docs/#authentication","title":"Authentication","text":"<p><code>authenticate(user, password)</code> - Authenticates the user with the provided credentials.</p> <p>Parameters</p> <ul> <li><code>user</code> string - The username of the user.</li> <li><code>password</code> string - The password of the user.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if authentication succeeds, <code>false</code> otherwise.</li> </ul> Example<pre><code>const isAuthenticated = authenticate(\n  'example_user', \n  'password123'\n);\nconsole.log(isAuthenticated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/api-docs/#user-information","title":"User Information","text":"<p><code>getUserInfo(userId)</code> - Retrieves information about the user.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user.</li> </ul> <p>Returns</p> <ul> <li><code>object</code> - An object containing user information such as name, email, and role.</li> </ul> Example<pre><code>const userInfo = getUserInfo('123456');\nconsole.log(userInfo);\n</code></pre> Response<pre><code>{\n  name: 'John Doe',\n  email: 'john@example.com',\n  role: 'admin'\n}\n</code></pre>"},{"location":"builders/reference/api-docs/#update-profile","title":"Update Profile","text":"<p><code>updateProfile(userId, newData)</code> - Updates the user's profile with new information.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user whose profile is to be updated.</li> <li><code>newData</code> object - An object containing the new profile information to be updated.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if the profile was successfully updated, <code>false</code> otherwise.</li> </ul> Example<pre><code>const updated = updateProfile(\n  '123456', \n  { name: 'Jane Doe', email: 'jane@example.com' }\n);\nconsole.log(updated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/features/","title":"Features","text":""},{"location":"builders/reference/features/#admonitions","title":"Admonitions","text":"<p>Note</p> <p>There can even be customized admonitions!</p> <p>Warning</p> <p>Make sure to properly store and manage your private keys.</p>"},{"location":"builders/reference/features/#tables","title":"Tables","text":"Endpoint URL Lorem ipsum <pre><code>dolor sit amet</code></pre> consectetur <pre><code>adipiscing elit</code></pre> sed do eiusmod <pre><code>tempor incididunt</code></pre> ut labore et <pre><code>dolore magna aliqua</code></pre>"},{"location":"builders/reference/features/#tabbed-elements","title":"Tabbed Elements","text":"HTTPWSS Endpoint URL Lorem ipsum <pre><code>dolor sit amet</code></pre> consectetur <pre><code>adipiscing elit</code></pre> sed do eiusmod <pre><code>tempor incididunt</code></pre> ut labore et <pre><code>dolore magna aliqua</code></pre> Endpoint URL Lorem ipsum <pre><code>adipiscing elit</code></pre> ut labore et <pre><code>dolore magna aliqua</code></pre>"},{"location":"builders/reference/features/#code-blocks","title":"Code Blocks","text":"<p>The following features are available for code blocks:</p> <ul> <li>Customized colors based on your branding</li> <li>Titles (i.e., the file name)</li> <li>Line numbers</li> <li>Highlighting specific lines</li> <li>Annnotations</li> </ul> <p>For example:</p> example.js<pre><code>// Function to greet a user\nfunction greetUser(name) {\n  if (name) {\n    console.log(`Hello, ${name}! Welcome to our documentation site.`);\n  } else {\n    console.log('Hello! Welcome to our documentation site.');\n  }\n}\n\n// Call the function with a user's name\ngreetUser('Alice');\n\ngreetUser(); // (1)!\n</code></pre> <ol> <li>Call the function without a user's name</li> </ol>"},{"location":"builders/reference/features/#snippets","title":"Snippets","text":"<p>Snippets can be reusable text or code files. With the snippets, you can pull reusable content from a directory within your docs or an external URL. For example, if your code is in a separate GitHub repository, you can access it using the Raw GitHub URL</p> <p>The following snippet is pulled in from a GitHub URL:</p> <pre><code>Example snippet!\n</code></pre> <pre><code>// Import the required packages\nimport Keyring from '@polkadot/keyring';\nimport { u8aToHex } from '@polkadot/util';\nimport { mnemonicToLegacySeed, hdEthereum } from '@polkadot/util-crypto';\n\n// Import Ethereum account from mnemonic\nconst keyringECDSA = new Keyring({ type: 'ethereum' });\nconst mnemonic = 'INSERT_MNEMONIC';\n\n// Define index of the derivation path and the derivation path\nconst index = 0;\nconst ethDerPath = \"m/44'/60'/0'/0/\" + index;\nconsole.log(`Mnemonic: ${mnemonic}`);\nconsole.log(`--------------------------\\n`);\n\n// Extract Ethereum address from mnemonic\nconst alice = keyringECDSA.addFromUri(`${mnemonic}/${ethDerPath}`);\nconsole.log(`Ethereum Derivation Path: ${ethDerPath}`);\nconsole.log(`Derived Ethereum Address from Mnemonic: ${alice.address}`);\n\n// Extract private key from mnemonic\nconst privateKey = u8aToHex(\n  hdEthereum(mnemonicToLegacySeed(mnemonic, '', false, 64), ethDerPath)\n    .secretKey\n);\nconsole.log(`Derived Private Key from Mnemonic: ${privateKey}`);\n</code></pre>"},{"location":"builders/reference/features/#terminal-window","title":"Terminal Window","text":"<p>Easy to update and create terminal output that provides visual confirmation of commands to be run and what the expected output should look like.</p> npx hardhat init 888\u00a0\u00a0\u00a0\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0888\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0888 888\u00a0\u00a0\u00a0\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0888\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0888 888\u00a0\u00a0\u00a0\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0888\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0888 8888888888\u00a0\u00a08888b.\u00a0\u00a0888d888\u00a0.d88888\u00a088888b.\u00a0\u00a0\u00a08888b.\u00a0\u00a0888888 888\u00a0\u00a0\u00a0\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\"88b\u00a0888P\"\u00a0\u00a0d88\"\u00a0888\u00a0888\u00a0\"88b\u00a0\u00a0\u00a0\u00a0\u00a0\"88b\u00a0888 888\u00a0\u00a0\u00a0\u00a0888\u00a0.d888888\u00a0888\u00a0\u00a0\u00a0\u00a0888\u00a0\u00a0888\u00a0888\u00a0\u00a0888\u00a0.d888888\u00a0888 888\u00a0\u00a0\u00a0\u00a0888\u00a0888\u00a0\u00a0888\u00a0888\u00a0\u00a0\u00a0\u00a0Y88b\u00a0888\u00a0888\u00a0\u00a0888\u00a0888\u00a0\u00a0888\u00a0Y88b. 888\u00a0\u00a0\u00a0\u00a0888\u00a0\"Y888888\u00a0888\u00a0\u00a0\u00a0\u00a0\u00a0\"Y88888\u00a0888\u00a0\u00a0888\u00a0\"Y888888\u00a0\u00a0\"Y888 \ud83d\udc77 Welcome to Hardhat v2.22.2 \ud83d\udc77\u200d \u00a0What do you want to do? \u2026 \u00a0\u00a0Create a JavaScript project  \u00a0\u00a0Create a TypeScript project  \u00a0\u00a0Create a TypeScript project (with Viem)  \u00a0\u00a0Quit"},{"location":"builders/reference/reference/api-docs-1/","title":"API Reference","text":"<p>Welcome to the API Documentation Template page! Here, you'll find the basic structure and guidelines for documenting APIs. This template provides a standardized format for documenting API endpoints, methods, parameters, and responses. Whether you're documenting a RESTful API, GraphQL API, or any other type of API, this template will help you create clear and comprehensive documentation that is easy for developers to understand and use.</p> <p>As API documentation is typically separate from standard documentation, you can use an integrated table of contents to combine the section and page navigation with the table of contents for each page all under the left navigation menu. For example, the Authentication, User Information, and Update Profile sections on this page would appear on the left navigation menu under API Reference.</p>"},{"location":"builders/reference/reference/api-docs-1/#authentication","title":"Authentication","text":"<p><code>authenticate(user, password)</code> - Authenticates the user with the provided credentials.</p> <p>Parameters</p> <ul> <li><code>user</code> string - The username of the user.</li> <li><code>password</code> string - The password of the user.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if authentication succeeds, <code>false</code> otherwise.</li> </ul> Example<pre><code>const isAuthenticated = authenticate(\n  'example_user', \n  'password123'\n);\nconsole.log(isAuthenticated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/api-docs-1/#user-information","title":"User Information","text":"<p><code>getUserInfo(userId)</code> - Retrieves information about the user.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user.</li> </ul> <p>Returns</p> <ul> <li><code>object</code> - An object containing user information such as name, email, and role.</li> </ul> Example<pre><code>const userInfo = getUserInfo('123456');\nconsole.log(userInfo);\n</code></pre> Response<pre><code>{\n  name: 'John Doe',\n  email: 'john@example.com',\n  role: 'admin'\n}\n</code></pre>"},{"location":"builders/reference/reference/api-docs-1/#update-profile","title":"Update Profile","text":"<p><code>updateProfile(userId, newData)</code> - Updates the user's profile with new information.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user whose profile is to be updated.</li> <li><code>newData</code> object - An object containing the new profile information to be updated.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if the profile was successfully updated, <code>false</code> otherwise.</li> </ul> Example<pre><code>const updated = updateProfile(\n  '123456', \n  { name: 'Jane Doe', email: 'jane@example.com' }\n);\nconsole.log(updated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/api-docs-2/","title":"API Reference","text":"<p>Welcome to the API Documentation Template page! Here, you'll find the basic structure and guidelines for documenting APIs. This template provides a standardized format for documenting API endpoints, methods, parameters, and responses. Whether you're documenting a RESTful API, GraphQL API, or any other type of API, this template will help you create clear and comprehensive documentation that is easy for developers to understand and use.</p> <p>As API documentation is typically separate from standard documentation, you can use an integrated table of contents to combine the section and page navigation with the table of contents for each page all under the left navigation menu. For example, the Authentication, User Information, and Update Profile sections on this page would appear on the left navigation menu under API Reference.</p>"},{"location":"builders/reference/reference/api-docs-2/#authentication","title":"Authentication","text":"<p><code>authenticate(user, password)</code> - Authenticates the user with the provided credentials.</p> <p>Parameters</p> <ul> <li><code>user</code> string - The username of the user.</li> <li><code>password</code> string - The password of the user.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if authentication succeeds, <code>false</code> otherwise.</li> </ul> Example<pre><code>const isAuthenticated = authenticate(\n  'example_user', \n  'password123'\n);\nconsole.log(isAuthenticated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/api-docs-2/#user-information","title":"User Information","text":"<p><code>getUserInfo(userId)</code> - Retrieves information about the user.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user.</li> </ul> <p>Returns</p> <ul> <li><code>object</code> - An object containing user information such as name, email, and role.</li> </ul> Example<pre><code>const userInfo = getUserInfo('123456');\nconsole.log(userInfo);\n</code></pre> Response<pre><code>{\n  name: 'John Doe',\n  email: 'john@example.com',\n  role: 'admin'\n}\n</code></pre>"},{"location":"builders/reference/reference/api-docs-2/#update-profile","title":"Update Profile","text":"<p><code>updateProfile(userId, newData)</code> - Updates the user's profile with new information.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user whose profile is to be updated.</li> <li><code>newData</code> object - An object containing the new profile information to be updated.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if the profile was successfully updated, <code>false</code> otherwise.</li> </ul> Example<pre><code>const updated = updateProfile(\n  '123456', \n  { name: 'Jane Doe', email: 'jane@example.com' }\n);\nconsole.log(updated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/api-docs/","title":"API Reference","text":"<p>Welcome to the API Documentation Template page! Here, you'll find the basic structure and guidelines for documenting APIs. This template provides a standardized format for documenting API endpoints, methods, parameters, and responses. Whether you're documenting a RESTful API, GraphQL API, or any other type of API, this template will help you create clear and comprehensive documentation that is easy for developers to understand and use.</p> <p>As API documentation is typically separate from standard documentation, you can use an integrated table of contents to combine the section and page navigation with the table of contents for each page all under the left navigation menu. For example, the Authentication, User Information, and Update Profile sections on this page would appear on the left navigation menu under API Reference.</p>"},{"location":"builders/reference/reference/api-docs/#authentication","title":"Authentication","text":"<p><code>authenticate(user, password)</code> - Authenticates the user with the provided credentials.</p> <p>Parameters</p> <ul> <li><code>user</code> string - The username of the user.</li> <li><code>password</code> string - The password of the user.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if authentication succeeds, <code>false</code> otherwise.</li> </ul> Example<pre><code>const isAuthenticated = authenticate(\n  'example_user', \n  'password123'\n);\nconsole.log(isAuthenticated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/api-docs/#user-information","title":"User Information","text":"<p><code>getUserInfo(userId)</code> - Retrieves information about the user.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user.</li> </ul> <p>Returns</p> <ul> <li><code>object</code> - An object containing user information such as name, email, and role.</li> </ul> Example<pre><code>const userInfo = getUserInfo('123456');\nconsole.log(userInfo);\n</code></pre> Response<pre><code>{\n  name: 'John Doe',\n  email: 'john@example.com',\n  role: 'admin'\n}\n</code></pre>"},{"location":"builders/reference/reference/api-docs/#update-profile","title":"Update Profile","text":"<p><code>updateProfile(userId, newData)</code> - Updates the user's profile with new information.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user whose profile is to be updated.</li> <li><code>newData</code> object - An object containing the new profile information to be updated.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if the profile was successfully updated, <code>false</code> otherwise.</li> </ul> Example<pre><code>const updated = updateProfile(\n  '123456', \n  { name: 'Jane Doe', email: 'jane@example.com' }\n);\nconsole.log(updated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs-1/","title":"API Reference","text":"<p>Welcome to the API Documentation Template page! Here, you'll find the basic structure and guidelines for documenting APIs. This template provides a standardized format for documenting API endpoints, methods, parameters, and responses. Whether you're documenting a RESTful API, GraphQL API, or any other type of API, this template will help you create clear and comprehensive documentation that is easy for developers to understand and use.</p> <p>As API documentation is typically separate from standard documentation, you can use an integrated table of contents to combine the section and page navigation with the table of contents for each page all under the left navigation menu. For example, the Authentication, User Information, and Update Profile sections on this page would appear on the left navigation menu under API Reference.</p>"},{"location":"builders/reference/reference/reference-2/api-docs-1/#authentication","title":"Authentication","text":"<p><code>authenticate(user, password)</code> - Authenticates the user with the provided credentials.</p> <p>Parameters</p> <ul> <li><code>user</code> string - The username of the user.</li> <li><code>password</code> string - The password of the user.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if authentication succeeds, <code>false</code> otherwise.</li> </ul> Example<pre><code>const isAuthenticated = authenticate(\n  'example_user', \n  'password123'\n);\nconsole.log(isAuthenticated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs-1/#user-information","title":"User Information","text":"<p><code>getUserInfo(userId)</code> - Retrieves information about the user.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user.</li> </ul> <p>Returns</p> <ul> <li><code>object</code> - An object containing user information such as name, email, and role.</li> </ul> Example<pre><code>const userInfo = getUserInfo('123456');\nconsole.log(userInfo);\n</code></pre> Response<pre><code>{\n  name: 'John Doe',\n  email: 'john@example.com',\n  role: 'admin'\n}\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs-1/#update-profile","title":"Update Profile","text":"<p><code>updateProfile(userId, newData)</code> - Updates the user's profile with new information.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user whose profile is to be updated.</li> <li><code>newData</code> object - An object containing the new profile information to be updated.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if the profile was successfully updated, <code>false</code> otherwise.</li> </ul> Example<pre><code>const updated = updateProfile(\n  '123456', \n  { name: 'Jane Doe', email: 'jane@example.com' }\n);\nconsole.log(updated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs-2/","title":"API Reference","text":"<p>Welcome to the API Documentation Template page! Here, you'll find the basic structure and guidelines for documenting APIs. This template provides a standardized format for documenting API endpoints, methods, parameters, and responses. Whether you're documenting a RESTful API, GraphQL API, or any other type of API, this template will help you create clear and comprehensive documentation that is easy for developers to understand and use.</p> <p>As API documentation is typically separate from standard documentation, you can use an integrated table of contents to combine the section and page navigation with the table of contents for each page all under the left navigation menu. For example, the Authentication, User Information, and Update Profile sections on this page would appear on the left navigation menu under API Reference.</p>"},{"location":"builders/reference/reference/reference-2/api-docs-2/#authentication","title":"Authentication","text":"<p><code>authenticate(user, password)</code> - Authenticates the user with the provided credentials.</p> <p>Parameters</p> <ul> <li><code>user</code> string - The username of the user.</li> <li><code>password</code> string - The password of the user.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if authentication succeeds, <code>false</code> otherwise.</li> </ul> Example<pre><code>const isAuthenticated = authenticate(\n  'example_user', \n  'password123'\n);\nconsole.log(isAuthenticated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs-2/#user-information","title":"User Information","text":"<p><code>getUserInfo(userId)</code> - Retrieves information about the user.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user.</li> </ul> <p>Returns</p> <ul> <li><code>object</code> - An object containing user information such as name, email, and role.</li> </ul> Example<pre><code>const userInfo = getUserInfo('123456');\nconsole.log(userInfo);\n</code></pre> Response<pre><code>{\n  name: 'John Doe',\n  email: 'john@example.com',\n  role: 'admin'\n}\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs-2/#update-profile","title":"Update Profile","text":"<p><code>updateProfile(userId, newData)</code> - Updates the user's profile with new information.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user whose profile is to be updated.</li> <li><code>newData</code> object - An object containing the new profile information to be updated.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if the profile was successfully updated, <code>false</code> otherwise.</li> </ul> Example<pre><code>const updated = updateProfile(\n  '123456', \n  { name: 'Jane Doe', email: 'jane@example.com' }\n);\nconsole.log(updated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs/","title":"API Reference","text":"<p>Welcome to the API Documentation Template page! Here, you'll find the basic structure and guidelines for documenting APIs. This template provides a standardized format for documenting API endpoints, methods, parameters, and responses. Whether you're documenting a RESTful API, GraphQL API, or any other type of API, this template will help you create clear and comprehensive documentation that is easy for developers to understand and use.</p> <p>As API documentation is typically separate from standard documentation, you can use an integrated table of contents to combine the section and page navigation with the table of contents for each page all under the left navigation menu. For example, the Authentication, User Information, and Update Profile sections on this page would appear on the left navigation menu under API Reference.</p>"},{"location":"builders/reference/reference/reference-2/api-docs/#authentication","title":"Authentication","text":"<p><code>authenticate(user, password)</code> - Authenticates the user with the provided credentials.</p> <p>Parameters</p> <ul> <li><code>user</code> string - The username of the user.</li> <li><code>password</code> string - The password of the user.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if authentication succeeds, <code>false</code> otherwise.</li> </ul> Example<pre><code>const isAuthenticated = authenticate(\n  'example_user', \n  'password123'\n);\nconsole.log(isAuthenticated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs/#user-information","title":"User Information","text":"<p><code>getUserInfo(userId)</code> - Retrieves information about the user.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user.</li> </ul> <p>Returns</p> <ul> <li><code>object</code> - An object containing user information such as name, email, and role.</li> </ul> Example<pre><code>const userInfo = getUserInfo('123456');\nconsole.log(userInfo);\n</code></pre> Response<pre><code>{\n  name: 'John Doe',\n  email: 'john@example.com',\n  role: 'admin'\n}\n</code></pre>"},{"location":"builders/reference/reference/reference-2/api-docs/#update-profile","title":"Update Profile","text":"<p><code>updateProfile(userId, newData)</code> - Updates the user's profile with new information.</p> <p>Parameters</p> <ul> <li><code>userId</code> string - The unique identifier of the user whose profile is to be updated.</li> <li><code>newData</code> object - An object containing the new profile information to be updated.</li> </ul> <p>Returns</p> <ul> <li><code>boolean</code> - <code>true</code> if the profile was successfully updated, <code>false</code> otherwise.</li> </ul> Example<pre><code>const updated = updateProfile(\n  '123456', \n  { name: 'Jane Doe', email: 'jane@example.com' }\n);\nconsole.log(updated);\n</code></pre> Response<pre><code>true\n</code></pre>"},{"location":"learn/about/nfts/","title":"NFTs","text":""},{"location":"learn/about/nfts/#introduction","title":"Introduction","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/nfts/#pepe-nfts","title":"Pepe NFTs","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/nfts/#nft-marketplace","title":"NFT Marketplace","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/pepe/","title":"About Pepe","text":""},{"location":"learn/about/pepe/#introduction","title":"Introduction","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/pepe/#the-network","title":"The Network","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/pepe/#roadmap","title":"Roadmap","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/pepe/#tokenomics","title":"Tokenomics","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/pepe/#community","title":"Community","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/technology/","title":"Technology","text":""},{"location":"learn/about/technology/#introduction","title":"Introduction","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/technology/#accounts","title":"Accounts","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about/technology/#tools","title":"Tools","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p> JavaScriptPython Column 1 Header Column 2 Header Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris. Nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum. Excepteur sint occaecat cupidatat non proident. Sunt in culpa qui officia deserunt mollit anim id est laborum. Tempor incididunt ut labore et dolore magna aliqua. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Excepteur sint occaecat cupidatat non proident. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Tempor incididunt ut labore et dolore magna aliqua. Column 1 Header Column 2 Header Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris. Nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum. Excepteur sint occaecat cupidatat non proident. Sunt in culpa qui officia deserunt mollit anim id est laborum. Tempor incididunt ut labore et dolore magna aliqua. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Excepteur sint occaecat cupidatat non proident. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Tempor incididunt ut labore et dolore magna aliqua."},{"location":"learn/about-two/nfts/","title":"NFTs","text":""},{"location":"learn/about-two/nfts/#introduction","title":"Introduction","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/nfts/#pepe-nfts","title":"Pepe NFTs","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/nfts/#nft-marketplace","title":"NFT Marketplace","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/pepe/","title":"About Pepe","text":""},{"location":"learn/about-two/pepe/#introduction","title":"Introduction","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/pepe/#the-network","title":"The Network","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/pepe/#roadmap","title":"Roadmap","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/pepe/#tokenomics","title":"Tokenomics","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/pepe/#community","title":"Community","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/technology/","title":"Technology","text":""},{"location":"learn/about-two/technology/#introduction","title":"Introduction","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/technology/#accounts","title":"Accounts","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"learn/about-two/technology/#tools","title":"Tools","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p> JavaScriptPython Column 1 Header Column 2 Header Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris. Nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum. Excepteur sint occaecat cupidatat non proident. Sunt in culpa qui officia deserunt mollit anim id est laborum. Tempor incididunt ut labore et dolore magna aliqua. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Excepteur sint occaecat cupidatat non proident. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Tempor incididunt ut labore et dolore magna aliqua. Column 1 Header Column 2 Header Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris. Nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum. Excepteur sint occaecat cupidatat non proident. Sunt in culpa qui officia deserunt mollit anim id est laborum. Tempor incididunt ut labore et dolore magna aliqua. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Excepteur sint occaecat cupidatat non proident. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Tempor incididunt ut labore et dolore magna aliqua."},{"location":"tutorials/beginner/mint-nfts/","title":"Creating Pepe NFTs","text":""},{"location":"tutorials/beginner/mint-nfts/#introduction","title":"Introduction","text":"<p>In the ever-evolving world of blockchain and NFTs, Pepe, the iconic internet frog, has found its way into the world of non-fungible tokens (NFTs). If you're a fan of Pepe and intrigued by the idea of creating your Pepe-themed NFTs, you're in for a treat. In this article, we'll guide you through the process of generating Pepe NFTs, complete with code samples in both JavaScript and Python.</p>"},{"location":"tutorials/beginner/mint-nfts/#prerequisites","title":"Prerequisites","text":"<p>Before we dive into the technical aspects, make sure you have the following prerequisites in place:</p> <ul> <li>Basic understanding of blockchain and NFTs</li> <li>Access to a suitable blockchain development environment (Ethereum, Binance Smart Chain, etc.). Familiarity with relevant development libraries and tools</li> <li>A collection of Pepe images or artwork for your NFTs</li> </ul>"},{"location":"tutorials/beginner/mint-nfts/#generate-pepe-nfts","title":"Generate Pepe NFTs","text":"<p>Here's a high-level overview of the steps involved:</p> <ol> <li> <p>Set up your development environment: Install Node.js and initialize a new JavaScript project</p> </li> <li> <p>Install web3.js: Use npm to install the web3.js library for interacting with your chosen blockchain</p> </li> <li> <p>Create your NFT contract: Write the smart contract for your Pepe NFTs. Define properties like ownership, metadata, and royalties</p> </li> <li> <p>Mint your NFTs: Implement the minting process in your contract to create new Pepe NFTs</p> </li> <li> <p>Interact with the blockchain: Use web3.js to interact with the blockchain, deploy your contract, and mint your Pepe NFTs</p> </li> </ol> JavaScriptPython mint-nfts.js<pre><code>const Web3 = require('web3');\nconst web3 = new Web3('YOUR_ETHEREUM_PROVIDER');\n\n// Assuming you have a Pepe NFT contract ABI and bytecode\nconst { abi, evm } = require('./PepeNFT.json');\n\nconst deployAndMint = async () =&gt; {\nconst accounts = await web3.eth.getAccounts();\n\n// Deploy the Pepe NFT contract\nconst contract = new web3.eth.Contract(abi);\nconst deployedContract = await contract\n    .deploy({ data: evm.bytecode.object })\n    .send({ from: accounts[0], gas: '1000000' });\n\nconsole.log(\n    'Pepe NFT Contract deployed at:',\n    deployedContract.options.address\n);\n\n// Mint a new Pepe NFT\nconst tokenId = 1; // The unique identifier for the Pepe NFT\nconst recipient = accounts[0]; // The owner of the NFT\nawait deployedContract.methods\n    .mintPepeNFT(tokenId, recipient)\n    .send({ from: accounts[0] });\n\nconsole.log('Pepe NFT with ID', tokenId, 'minted for', recipient);\n};\n\ndeployAndMint();\n</code></pre> mint-nfts.py<pre><code>from web3 import Web3\nfrom web3.contract import Contract\n\n# Connect to the Ethereum network\nw3 = Web3(Web3.HTTPProvider(\"YOUR_ETHEREUM_PROVIDER\"))\n\n# Load the ABI and bytecode from your Pepe NFT contract\nwith open(\"PepeNFT.json\") as json_file:\n    contract_data = json.load(json_file)\n\ncontract = w3.eth.contract(abi=contract_data[\"abi\"], bytecode=contract_data[\"bytecode\"])\n\n# Deploy the Pepe NFT contract\ntx_hash = contract.constructor().transact({\"from\": w3.eth.accounts[0], \"gas\": 2000000})\n\ntx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)\n\ncontract_address = tx_receipt.contractAddress\n\nprint(\"Pepe NFT Contract deployed at:\", contract_address)\n\n# Mint a new Pepe NFT\ntoken_id = 1\nrecipient = w3.eth.accounts[0]\n\ntx_hash = contract.functions.mintPepeNFT(token_id, recipient).transact(\n    {\"from\": w3.eth.accounts[0]}\n)\n\nw3.eth.waitForTransactionReceipt(tx_hash)\n\nprint(f\"Pepe NFT with ID {token_id} minted for {recipient}\")\n</code></pre>"}]}